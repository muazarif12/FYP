 Hey there, this is Akshay Madan. Welcome back to a new video and in this video we are going to cover the most demanded topic that is FlutterBlock. So let me give you one insight that we are only going to cover the theoretical part of FlutterBlock because I bet that nobody on the internet has explained FlutterBlock so theoretically so deeply because you will find so many tutorials, so many video coding tutorials on FlutterBlock. But I have seen a problem that nobody actually understands from those problems because theory is missing because you have not understood the theoretical part why we use block, how to use block, when to use block and why it is so famous, why it is so demanded in the industry, why so many companies are only using FlutterBlock state management. Right. So this we are going to cover in this video. We are going to have coding tutorials very soon. I'm going to prepare a complete project based on FlutterBlock, complete coding sessions on FlutterBlock, but that will come soon. So in this video, just try to understand the theoretical part of FlutterBlock. Right. So I hope you will get it why I'm creating this video. So now the purpose is clear. Now what we are going to see in this video is clear. Now let's try to understand or grab this concept very deeply. So let's put the topic of the day that is FlutterBlock. Now let's put our first question as what is block. Right. So if I have to answer this question, when we try to create complex applications, when we create bigger applications, I'm not talking about to do applications, but we are going to create a lot of applications. I'm not talking about to do application or very small college based projects. Right. I'm talking about company based projects. When we create, when we join a company, when we're, when a company is making big products, which have to be given to millions of users. Right. Their complexity is very high. Right. So what we have to do is we can't just mix our UI layer and our logical layer. Right. So this is our logic layer where all the logics will be written. Let's say, uh, in your application, there is a light button in your application. There is a follow button. Right. So what happens when you click on like button? It turns red, or if you have already already liked, it becomes a unread or it gets unfilled. Right. When you click on follow, what happens? Some APIs are being called or some internal function is getting called UI is getting updated because when you click on follow button, it will turn into unfollow. Right. You have already followed that person. Right. So all these logics are written in this logical layer. In the complex application and the companies, right. I'm not talking about small scale projects. There you are using set state. You are using. Okay. If I click on a hard button, then set state, right. Change the state of that red button and call the five is function. If we're the, we're in the five is function. The document will get updated from light to true. Right. There will be a boolean. So you may be doing this in your school based projects in a college based projects using, you are using set state or you are using provider or gatex. That is fine. But in complex application, you cannot mix this UI layer with the logical layer. You have to have a communication thing between in between. Right. You have to keep it separate. There will be one thing that will be communicating between there that will act as a communication between UI and logical layer. Right. And there the block plays an important part. Right. Because, uh, as I just told that in complex application, when you click on that hard button, you can't just set the state too hard to fill to fill to, right. So there some API's are need to be called from your backend and that data, the profile data needs to be get updated or some API needs to be get caught. Right. So there we can't just mix our UI layer with the logical layer and block plays the important part there. Right. So if I try to explain using a diagram, uh, let's see like this, this is my UI. What do, what I, what do I mean by UI? We just took an example. There is a hard button. Right. This hard button is a favorite button. Like you can like a post. This can be filled or it can be unfilled. Something like this. There are only two states. So this is my UI. Let's consider that in our app, there is only one icon. That is this hard button filled or not filled. Right. This is my UI. Otherwise UI can be anything. It can be container. It can be list view, grid view, anything. Right. But let's consider that we only have this icon thing. So this is my UI. Right. And this is my data layer. Right. What is happening in this data layer? All my, let's say you are using Firebase. Let's say you're using MongoDB. You're using Hive database, any kind of database that you can use. So actually, if you will think that the state, whether a person has liked someone else post or not, the state is actually saved in data. Right. The data is having this thing. So data will have a collection or a table of posts. And in that post, there will be a list of users who have liked that post. Right. So in this list, there will be some users. Right. Let's say this person, the current user has not liked a certain post. So that user ID will not be there in this list. Right. So this is my data. So I just wanted to give you one single idea, simple idea that this is my data where all my things are stored. And this is my UI. Right. Now in school projects and college projects, you can mix it up. Right. Wherever you are having this UI, as soon as you're going to click on this hard button, you're going to call a Firebase function directly inside that same file. Right. We do it. I have also done it when I was learning Flutter. I have done it. I directly called the Firebase function as soon as I clicked on this button. But that should not be the case if you're working in bigger companies. Right. So there is one medium and that is called block. Right. So let's put the block in between, which is going to act as a communication between the data and my UI and how the communication is going to happen. So communication is going to happen with the help of two things that you need to remember. One is event and one is state. Right. So what will happen is my UI will send a event to my block. What are events? It's a general English term. Right. What are events? So let's say you are organizing a birthday party. So that's an event. Right. So if you're organizing an event, you are going to call your friends. You are going to call your relatives. Right. So that's an event. Right. So in UI, in mobile application or in software development, what are events? Let's say you clicked on this hard button. So something has happened or something needs to be happened. Right. So that acts as an event. So when you click on this hard button, that's an event. When you click on a follow button, that's an event. Or let's say you are scrolling at the bottom, like you are scrolling through the list and you hit the bottom. So that acts as an event. So what do you expect there? You want more posts to be loaded. Right. Because that's an event. So when something needs to be happened or something has happened, that is called an event. That is called an event. So you understand that all these events will only come from UI because only UI can act as a communication for the user. You can interact with the UI. You can't interact with the firebase. You can't interact with the data layer. You can't interact with the models. Right. You can only interact with UI. Right. Because you are seeing Instagram. You can only scroll through the list. You can only scroll to the grid views in the profile section. You can only click on the buttons. You can only see the stories circle abiturs. Right. So that's the UI. So UI will send an event to the block. Hey, something has happened. Now something needs to be happened. Right. So UI will send an event to the block. This is clear. Now, as soon as an event will be sent to the block, let's say you clicked on this icon, this hard button. So that means you want this post to be liked. That means you are liking this post. Right. Something needs to be sent to the database also. Hey, Akshet has liked someone else post. So let's update the database. Right. So for the next time when I open Instagram, I should see that post already being liked by me. Right. I should only see this field button, not this empty hard button. Right. So as soon as the event is sent to the block, this block will send a request to my data. A request will be sent to my data. Hey, something has happened. So I need to update the data. Right. So as you know that a data takes a request or a server takes a request and it returns a response. Right. So a response will be sent to the block back. So as soon as this block will receive a response, let's say we got 200 response, that is success response that this data is successfully updated for the Akshet that Akshet has liked a certain post. So 200 responses sent. Then what will happen? This block will send something back to the my UI. Hey, you sent an event that you clicked on like button. Now we have already successfully liked your post in the database also in the cache also everything is updated. Right. So what will block send? It will send a state. So this is called state. This is the general mechanism. Only this is done by block. Nothing else. Nothing else. You can, you, you can also build apps without using block, but they will not be understand by understood by other developers. When someone else will join your company, he will find very hard to read your code. Right. So this is the purpose that are solved by state management library. Simple. There are many tutorials on internet which have made this block concept very easy, but they are directly jumping onto the code. So I wanted to explain the theoretical part because let's, let's go deeper into it. So now let's try to focus on this part UI and block because most of them, mostly you will be working with this and firebase functions. You already know how to write or database functions, API requests. You already know how to write, right? Or that we can cover in our coding tutorials, but let's try to go deeper into this UI and block part. So this is my UI and this is my block. Right. Now, uh, you click on this hard button. Currently it is unfit. And you want it, you want to like this post, right? So what you will say this whenever a user will click on this. So what will happen? This icon button or this icon will be wrapped with an inkwell or you can wrap it with a gesture detector. I'm talking about flutter. So if you are from some other front end framework, you can use your own click, uh, widgets, right? So in my case, there is inkwell and gesture detector. So when I'm going to click on this hard button, I will send a event to my block. Right. And I can name this event. I'm sure I'm going to show you how you can do it. I'm going to name this event. So this event name should also be unique. So basically this event is a class and this class name should be unique. And you know that we can't have, uh, same class names, right? So this is an event. Now this block can have multiple types of states, right? So as soon as you're going to click on this, uh, like button, it's very uncertain. It's very uncertain that it's not going to get updated as soon as you're going to click it. There will be some time gap, right? Because it has to go to the database. It has to update it. It has to take the response, come back, right? So as soon as you're going to click on this, uh, icon, what I will say, what I will do is I will return a loading state. Basically in this thing, we don't actually, uh, like show the loading state, but let's say you are going to follow someone, right? So what you can say is you can have a snack bar or you can have a bottom sheet. Hey, we are following a Chris. We are following this person. Just wait for a second. Right? You can have the snack bar or you can have a bottom sheet message or alert box, right? Or let's say you are, you have created a post and you want to delete it, right? So this is going to take some time. So as soon as your block is going to receive an event, delete event, it is going to send a state. Hey, we are loading it. So you can show alert box. You can show a snack bar, right? So as soon as, uh, so as, uh, as the alert will be visible to the user, the user will know, Hey, I have to wait for some time. Right? And now as the block will receive a success event from the database that here, we have successfully deleted it. We have successfully liked the post. Then it will have another state. Right? So that state will be called success state. And again, you can have another UI thing. UI will be updated. So you can have a success snack bar. You can have a success bottom sheet. Hey, you have successfully liked your post. Hey, we have successfully deleted your post. So something like that. Right? So now this was a simple funder, but how we are going to code it. So let me show you. Right? So in block in flutter block, basically you only need to remember three things and 90% of the cases you are going to use these things only. Right? So let's talk about the UI. So in the UI or let's talk about the files. Right? So whenever you have to create a block, let's say you are creating a block for a post section. So this is my Instagram here. My stories are there. And this is my home section where all my posts are there. Right? So as soon as you are going to open the Instagram, it cannot load the updated post instantaneously. Right? It has to go to the server, fetch some data. Right? So let's not go inside this part, but let's see. So you are creating a block for home section. Right? So you can create a home block. Right? So it will have three files. So the first will be home block events dot dot. Here all my events will be written. So what can happen in the events? So you have to think in the home section, what can happen? You can click on a story. You can click on bottom. There will be bottom bar over here. There are different different icons will be there. So you can click on one of the icons that is also happening in the home section. You can like the post. You can comment on a post. You can try to zoom it or what you can say. You can click on the profile photo of that poster. Like who has created or that creator who has posted that post. Right? Or you can like try to report it. You can try to follow that person. Right? So these are all the events. So you have to write all the events in this events file. Right? And they all will be unique. So we have talked about events. Now another file will be home block state. So in this file, all the states will be written. So what will happen? So try to interpret it like this. Try to like read it like this. If I have sent an event like this, what state should be sent? What state should be emitted? So in Flutter or in block states are emitted. Right? And events are called. Right? So in states what state will be emitted. So one state can be story icon clicked. State dot dot. Right? Another can be profile. Dp clicked state dot dot. Now try to understand what will happen if I click on a dp of some other user. I should navigate to the user profile. Right? So as soon as my UI will receive this state. As you know that I'm going to receive a state from the block. So as soon as I will receive a state from my block, I should navigate my UI. Perfect. Let's say there is profile report state dot dot. If I'm trying to report a person who has posted something unusual on Instagram or in some social media. And I want to report this person or I want to report this post. What will happen in the UI? A bottom sheet will appear. Hey, you want to report it. What are the reasons you want to give to report this person? Right? And all the reasons will be written. And there will be one final button report. And there will be one more event that will be sent to the block. Hey, the person confirms the report. Let's report it. Let's send this request to the database. Right? So these are the certain states. But these are the events. These are the states. They are just the classes. Right? Where the actual logic is written. If I'm clicking on the report. Where is that function written which is going to send an API request to my database. Right? So that will be written in my third file that is called home block dot dot. There all the functions will be written. Right? Now this is fine. This is all my logical layer. This is all my logical layer. But how my events, how my states, how I'm going to listen to these events and states. Right? How will I interpret that? Hey, how will my block will know that the user has user wants this event to be called or user wants this state to be emitted? How? How my UI will be communicating with the block? So for that, we have certain widgets that are built inside the block library. So as if you want to use block for flutter, you know that you need to write some libraries or you need to define some dependencies in pubspec.tml file. Right? So when you are going to use a block flutter block package. So in that you get some widgets. So I'm going to define them. I'm going to tell you the main three widgets, which are used widely and 90% of the cases only these will be used. First is block listener. Second is block builder. Third is block consumer. Right? So what happens? Let's say you are having this page. Right? And this is a container basically. And in this container, you are having list view. You are having column. You are having grid view, anything you can have. Right? So what will you will do is, you will wrap this container with a block listener. And this block listener will have just a second. This block listener will have home block, comma, home state. And then finally, you can have listener property, which will take current. So what is the difference between block listener, block builder and block consumer? So block listener will not build anything. It will just listen to the state. Right? So you know that UI is going to listen or the block is going to emit some state. So my UI to want my UI to listen to the states. I can use a block listener. It will only have functions over here. You can change the state of the UI, but you cannot build something. Right? So let me give you one example. Let's say there is some button over here. When you want to click on this button, you want a snack bar to appear. You know that snack bar, scaffold messenger dot show snack bar is there. Right? You want that snack bar to be there, or you want that alert box to appear on your screen. Right? So here you're not building something. You're just running a function because you know that these are just functions. Right? So in the listener, you can say that, Hey, if my current, what is this previous? What is this current? So they are basically states. So if my previous state, if my current state, so we are going to focus on current state. So whatever state I'm going to get that will act as my current state. So if my current state is show snack bar success state, then you are going to run a function called staff scaffold messenger dot shows, but something like this. But here, you know that I'm not building anything. I don't build a container. I do not build a list view, grid view, anything. I'm just listening to a state and I'm based on the state that I'm getting from the blog. I'm going to run some functions here. This function can have a set state function also. Right? Let's say you are going to click on this button and you want this five to become a state. You want this five to become six. Right? This is a five and you want this five to become six. That is a counter example. Right? So you can use a block listener and you can just update the UI. Right? You can use a block listener for that. Now, what is block builder? Let's come to block builder now. So for block builder, let me give an example. Let's say this is an Instagram app. And as soon as you're going to click on the Instagram icon, the app will open. Right? So as soon as the app will open, it will call some APIs from the back end. Hey, I want to fetch the latest post for this user. Right? So in the current state, the initial event will be called. Right? So you know that the block takes the events and it emits the state. So event will be sent as initial fetch event. Right? The fetch event will be sent to the block that here the user wants to fetch the data from the database. Right? So this is an initial fetch event. Right? And this block will send the success state or the error state, the loading state. Right? These three states can be there. Right? So what I can say that as soon as I'm going to open the app, I want to build something because it's empty, right? It's an empty scaffold. There is nothing on the screen. So what I should show on the screen. Right? So I will wrap my UI with a block builder. Basically, we don't do rapid draft a complete page with a block builder. But let's say you want to just build something. I'm not talking about listening to the states that are going to come afterwards. But let's focus on the block builder. Right? So when you want to update the UI, when you want to show something else, then you use block builder. Right? So based on this, it will also have a home block because we are talking about home feature. So home block and home state. Right? And it will have a builder property. It will not have a listener property. It will have a builder property. And after this builder property, we also have a block property in which you have to define the file name, which is this home block. So you have to define the class name as home block over here. You can create an instance of this home block. So you can define it over here. And this builder will again have previous and current. Right? So over here, I can say if my current and this, these are also states, right? So if my current state is, let's say loading state, because as soon as you're going to open the Instagram, it will be in loading state. Right? So you can return and yes, in builder, we have a return statement, right? Because widgets will be returned. Right? So return will be a circle loading. Circle loader. Circle loader. We call it circle loading progress indicator. Right? So circle loader. Else if, if my current is success state, that means my database has already sent me the data. Right? So this will be my success state. If my current state is success state, then you can return home page. Basically this home page will be container with story bar with post list view bottom bar anything. So I'm considering it as home page. Else if, if my current is, let's say error state. Let's say your internet is off. Right? Error state. Then you can return a special container or an error container. This error container is actually a UI which is built by the developers. Hey, you are not using, your mobile data is off. Your wifi is, you're not going to the wifi or some error has occurred. So this error can happen. Or else you can show, again, you can show a loading bar or you can show something else, size box or something else. Right? So this was the purpose of block builder. Here we are returning anything. We are returning some things. In listener, we were calling the functions. Here we are returning the widgets. Now what happens? Uh, because when you will be creating actual pages, the actual features there, you will need the combination of block builder and block listener because you want to call the functions. Also, some events will be required to call functions and some events will call, uh, will be requiring to update the UI. Right? Or building, rebuilding the UI. Right? So for that, we use block consumers. So let me clear this. So in block consumers, it will again take home block or the name of your block and home state, because it is going to return a state, it will have a block property where you have to define the block which you are going to use. It will have a builder property. It will have a listener property. And it will have build when, listen when. Basically this build when and listen when are also there in builder and listener, block listener respectively. So this build when is also there in block builder, this build listen when is also there in block listener. Basically that current and previous, which I told you, right? They happen in listen when and build when only. So basically they define when do you want to listen? When do you want to build? Right? So this happens in, uh, listen when and build when. So there I did a mistake, but yeah, I hope you understood. Right? So now in block, you can define your home block. In builder, you can define some, uh, like when you want to return some widgets based on the states that you're getting. Let's say you get a success state and show the page, you get an error state, then show the error widget. If you got a loading state and show a loading bar. Right? So this builder will return widgets. This listener will call functions. So builder builds the widgets, listener calls the functions. So let's say you got a state where you want to call a scaffold messenger function. You can call a scaffold bar or scaffold message. If you want to show alert, this is also function showed alert dialogue is their function. So you can call that function. You want to update the state of a UI, then you can call the set state function over here. So this was the general idea of block listener, block builder and block consumer 90% of the cases. This is enough. Right? There are block provider, um, multi block providers, then repository providers. They are there also, but 90% of the cases you're going to use this only. Now we are going to, uh, see the coding part in the next videos. I hope you understood this block concept. If you want to, if you want me to revise, uh, only one thing I want to say that, uh, block basically helps in separating your UI from the logical layer. So that your UI doesn't get mixed with the logical layer. Right? And you saw that because here, if you will try to create a homepage for an Instagram, will you, as soon as you're going to click on the story icon, you're going to write the navigate navigator function over there itself. Or you will, uh, click on this, uh, follow button for a profile. You will call the five is function or the MongoDB function there itself. Right? So, uh, let's, uh, support this channel. And if you like this video, hit the like button, subscribe to my channel. Till next. Bye. Bye. Bye. Bye. Bye. Bye. Bye. Bye. Bye. Bye. Bye. Bye. Bye. Bye. Bye. Bye. Bye. Bye. Bye. Bye. Bye. Bye. Bye. Bye. Bye. Bye. Bye. Bye. Bye.